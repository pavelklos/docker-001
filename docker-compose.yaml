services:

  frontend:
    build:
      context: ./DockerCourseFrontend
      dockerfile: DockerCourseFrontend/Dockerfile
    # image: frontend
    image: pavelklos/dotnet-001-frontend
    container_name: frontend
    ports:
      - 1234:80

  api:
    build:
      context: ./DockerCourseApi
      dockerfile: DockerCourseApi/Dockerfile
    # image: api
    image: pavelklos/dotnet-001-api
    container_name: api
    ports:
      # - 17860:80
      # - 5027:80
      - 5027:8080

  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: database
    environment:
      # - ACCEPT_EULA=true
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=dotnet#123
    ports:
      - 1433:1433

  database-seed:
    depends_on: [ database ]
    build:
      context: ./Database
      dockerfile: Dockerfile
    container_name: database-seed



# version: '2.4'

# services:

#   frontend:
#     build:
#       context: ./DockerCourseFrontend
#       dockerfile: DockerCourseFrontend/Dockerfile
#     image: frontend
#     container_name: frontend
#     ports:
#       - 1234:80

#   api:
#     build:
#       context: ./DockerCourseApi
#       dockerfile: DockerCourseApi/Dockerfile
#     image: api
#     container_name: api
#     ports:
#       # - 17860:80
#       - 5027:80

#   database:
#     image: mcr.microsoft.com/mssql/server:2022-latest
#     container_name: database
#     environment:
#       - ACCEPT_EULA=Y
#       - MSSQL_SA_PASSWORD=dotnet#123
#     ports:
#       - "1433:1433"
#     healthcheck:
#       test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P dotnet#123 -Q 'SELECT 1' || exit 1"]
#       interval: 10s
#       retries: 10
#       start_period: 10s
#       timeout: 3s

#   database-seed:
#     image: mcr.microsoft.com/mssql-tools
#     depends_on:
#       database:
#         condition: service_healthy
#     volumes:
#       - ./Database/CreateDatabaseAndSeed.sql:/CreateDatabaseAndSeed.sql
#     command: >
#       bash -c "
#         echo 'Waiting a bit more for SQL Server to be fully ready...' &&
#         sleep 5 &&
#         echo 'Checking if database already exists...' &&
#         DB_EXISTS=$(sqlcmd -S database -U sa -P 'dotnet#123' -Q 'SELECT name FROM sys.databases WHERE name = '\"'\"'podcasts'\"'\"'' -h -1 2>/dev/null | tr -d ' \n\r') &&
#         if [ \"$DB_EXISTS\" = \"podcasts\" ]; then
#           echo 'Database \"podcasts\" already exists. Skipping seeding to prevent duplicates.'
#         else
#           echo 'Running database seed script...' &&
#           sqlcmd -S database -U sa -P 'dotnet#123' -d master -i /CreateDatabaseAndSeed.sql &&
#           echo 'Database seeding completed.'
#         fi
#       "
#     container_name: database-seed
